import type { Metadata } from "next";
import localFont from "next/font/local";
import "./globals.css";
import { ThemeProvider } from "@/components/custom/theme.provider";
import { UserProvider } from "@/context/user.context";
import { RoutesContext } from "@/context/routes.context";

const geistSans = localFont({
  src: "./fonts/GeistVF.woff",
  variable: "--font-geist-sans",
  weight: "100 900",
});
const geistMono = localFont({
  src: "./fonts/GeistMonoVF.woff",
  variable: "--font-geist-mono",
  weight: "100 900",
});
const geistBold = localFont({
  src: "./fonts/GeistBoldVF.otf",
  variable: "--font-geist-bold",
  weight: "100 900",
});
const geistSemiBold = localFont({
  src: "./fonts/GeistSemiBoldVF.otf",
  variable: "--font-geist-semi-bold",
  weight: "100 900",
});
const geistMedium = localFont({
  src: "./fonts/GeistMediumVF.otf",
  variable: "--font-geist-medium",
  weight: "100 900",
});
const geistRegular = localFont({
  src: "./fonts/GeistRegularVF.otf",
  variable: "--font-geist-regular",
  weight: "100 900",
});

export const metadata: Metadata = {
  title: "Acter by Saidev Dhal",
  description: "Generated by create next app",
};

const protectedRoutes = ["/chat", "/history"];
const publicRoutes = ["/"];

export default function RootLayout({
  children,
}: Readonly<{
  children: React.ReactNode;
}>) {
  return (
    <html lang="en">
      <body
        className={`${geistSans.variable} ${geistMono.variable} ${geistMedium.variable} ${geistBold.variable} ${geistSemiBold.variable} ${geistRegular.variable} antialiased`}
      >
        <UserProvider>
          <RoutesContext
            protectedRoutes={protectedRoutes}
            publicRoutes={publicRoutes}
          >
            <ThemeProvider
              attribute="class"
              defaultTheme="light"
              forcedTheme="light"
              enableSystem
              disableTransitionOnChange
            >
              {children}
            </ThemeProvider>
          </RoutesContext>
        </UserProvider>
      </body>
    </html>
  );
}
